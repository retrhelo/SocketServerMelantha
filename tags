!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CONFIG_FILENAME	inc/config.h	9;"	d
CONFIG_PORT	inc/config.h	19;"	d
CONFIG_ROOT	inc/config.h	18;"	d
FALSE	inc/fifo.h	12;"	d
GET	inc/http.h	/^	GET, $/;"	e	enum:http_cmd_t
GIF	inc/http.h	/^	GIF, $/;"	e	enum:http_response_t
HTML	inc/http.h	/^	HTML, $/;"	e	enum:http_response_t
HTTP_RESPONSE_HEAD_FORMAT	src/http.c	/^static char const *HTTP_RESPONSE_HEAD_FORMAT = $/;"	v	file:
JPG	inc/http.h	/^	JPG, $/;"	e	enum:http_response_t
PNG	inc/http.h	/^	PNG, $/;"	e	enum:http_response_t
RECV_BUF_SIZE	src/http.c	34;"	d	file:
SEND_BUF_SIZE	src/http.c	62;"	d	file:
THREAD_LIST_SIZE	src/main.c	35;"	d	file:
TRUE	inc/fifo.h	11;"	d
TYPE_ERROR	inc/http.h	/^	TYPE_ERROR = 0, $/;"	e	enum:http_response_t
UNSUPPORTED	inc/http.h	/^	UNSUPPORTED = 0, $/;"	e	enum:http_cmd_t
__CONFIG_H	inc/config.h	5;"	d
__FIFO_H	inc/fifo.h	5;"	d
__HTTP_H	inc/http.h	6;"	d
_enter_cs	src/main.c	184;"	d	file:
_enter_cs	src/main.c	258;"	d	file:
_leave_cs	src/main.c	186;"	d	file:
_leave_cs	src/main.c	259;"	d	file:
_str_equal	src/config.c	33;"	d	file:
_str_equal	src/main.c	110;"	d	file:
_str_equal	src/main.c	94;"	d	file:
_thread_add	src/main.c	39;"	d	file:
config_current	inc/config.h	/^struct config_t config_current;$/;"	v	typeref:struct:config_t
config_load	src/config.c	/^int config_load(FILE *fp) {$/;"	f
config_t	inc/config.h	/^struct config_t {$/;"	s
exit_handler	src/main.c	/^void exit_handler(int sig) {$/;"	f
fifo_create	src/fifo.c	/^struct fifo_t *fifo_create(void) {$/;"	f
fifo_dequeue	src/fifo.c	/^int fifo_dequeue(struct fifo_t *fifo) {$/;"	f
fifo_destruct	src/fifo.c	/^void fifo_destruct(struct fifo_t *fifo) {$/;"	f
fifo_enqueue	src/fifo.c	/^int fifo_enqueue(struct fifo_t *fifo, int socket_fd, $/;"	f
fifo_node	inc/fifo.h	/^struct fifo_node {$/;"	s
fifo_t	inc/fifo.h	/^struct fifo_t {$/;"	s
filetype	inc/fifo.h	/^	enum http_response_t filetype;$/;"	m	struct:fifo_node	typeref:enum:fifo_node::http_response_t
get_head	src/fifo.c	/^struct fifo_node *get_head(struct fifo_t *fifo, int *socket_fd, $/;"	f
get_type	src/main.c	/^static enum http_response_t get_type(char const *filename) {$/;"	f	file:
head	inc/fifo.h	/^	struct fifo_node *head;$/;"	m	struct:fifo_t	typeref:struct:fifo_t::fifo_node
http_cmd_t	inc/http.h	/^enum http_cmd_t {$/;"	g
http_resolve	src/http.c	/^enum http_cmd_t http_resolve(int socket_fd, char *filename, int size) {$/;"	f
http_response_t	inc/http.h	/^enum http_response_t {$/;"	g
http_send	src/http.c	/^int http_send(int socket_fd, enum http_response_t rt, FILE *fp) {$/;"	f
http_send_head	src/http.c	/^static int http_send_head(int socket_fd, char *buf, $/;"	f	file:
is_active	inc/fifo.h	/^	int is_active;			\/\/ whether this node is active $/;"	m	struct:fifo_node
key_port	src/config.c	/^static char const *key_port = "port";$/;"	v	file:
key_root	src/config.c	/^static char const *key_root = "root";$/;"	v	file:
main	src/main.c	/^int main(int argc, char *argv[]) {$/;"	f
mutex_tasklist	src/main.c	/^pthread_mutex_t mutex_tasklist;$/;"	v
next	inc/fifo.h	/^	struct fifo_node *next;$/;"	m	struct:fifo_node	typeref:struct:fifo_node::fifo_node
p_file	inc/fifo.h	/^	FILE *p_file;			\/\/ the file to be sent $/;"	m	struct:fifo_node
port	inc/config.h	/^	int port;$/;"	m	struct:config_t
readline	src/config.c	/^static int readline(FILE *fp, char *buf, int n) {$/;"	f	file:
receiver	src/main.c	/^void *receiver(void *args) {$/;"	f
root	inc/config.h	/^	char root[256];$/;"	m	struct:config_t
sender	src/main.c	/^void *sender(void *args) {$/;"	f
socket_fd	inc/fifo.h	/^	int socket_fd;$/;"	m	struct:fifo_node
socket_fd	src/main.c	/^static int socket_fd = 0;$/;"	v	file:
socket_readline	src/http.c	/^static int socket_readline(int socket_fd, char *buf, int size) {$/;"	f	file:
tail	inc/fifo.h	/^	struct fifo_node *tail;$/;"	m	struct:fifo_t	typeref:struct:fifo_t::fifo_node
tasklist	src/main.c	/^static struct fifo_t *tasklist = NULL;$/;"	v	typeref:struct:fifo_t	file:
thread_list	src/main.c	/^static pthread_t thread_list[THREAD_LIST_SIZE];$/;"	v	file:
thread_ptr	src/main.c	/^static int thread_ptr = 0;$/;"	v	file:
thread_sigstop	src/main.c	/^static int thread_sigstop = 1;$/;"	v	file:
