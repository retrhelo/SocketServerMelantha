!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#foot 	website-example/css/standard.css	/^#foot {$/;"	i
#left_sheet 	website-example/css/standard.css	/^#left_sheet {$/;"	i
#main_content 	website-example/css/standard.css	/^#main_content {$/;"	i
#main_title 	website-example/css/standard.css	/^#main_title {$/;"	i
.lightSpeedIn 	website-example/css/myanimate.css	/^.lightSpeedIn {$/;"	c
.rotateIn 	website-example/css/myanimate.css	/^.rotateIn {$/;"	c
20deg	website-example/css/myanimate.css	/^    -webkit-transform: skewX(20deg);$/;"	s
20deg	website-example/css/myanimate.css	/^    transform: skewX(20deg);$/;"	s
5deg	website-example/css/myanimate.css	/^    -webkit-transform: skewX(-5deg);$/;"	s
5deg	website-example/css/myanimate.css	/^    transform: skewX(-5deg);$/;"	s
60	website-example/css/myanimate.css	/^  60% {$/;"	s
80	website-example/css/myanimate.css	/^  80% {$/;"	s
CC	Makefile	/^CC := gcc$/;"	m
CONFIG_FILENAME	inc/config.h	9;"	d
CONFIG_PORT	inc/config.h	21;"	d
CONFIG_ROOT	inc/config.h	20;"	d
CONFIG_ROOT_SIZE	inc/config.h	11;"	d
CSS	inc/http.h	/^	CSS, $/;"	e	enum:http_response_t
C_FLAGS	Makefile	/^C_FLAGS := -g -Iinc -Wall -c $/;"	m
FALSE	inc/fifo.h	12;"	d
GET	inc/http.h	/^	GET, $/;"	e	enum:http_cmd_t
GIF	inc/http.h	/^	GIF, $/;"	e	enum:http_response_t
HTML	inc/http.h	/^	HTML, $/;"	e	enum:http_response_t
HTTP_RESPONSE_HEAD_FORMAT	src/http.c	/^static char const *HTTP_RESPONSE_HEAD_FORMAT = $/;"	v	file:
JPG	inc/http.h	/^	JPG, $/;"	e	enum:http_response_t
LINK_FLAGS	Makefile	/^LINK_FLAGS := -g -pthread$/;"	m
MAX_TASKS	src/mthread.c	22;"	d	file:
OBJ	Makefile	/^OBJ := $(addprefix obj\/, $(notdir $(SRC:.c=.o)))$/;"	m
PNG	inc/http.h	/^	PNG, $/;"	e	enum:http_response_t
RECV_BUF_SIZE	src/http.c	18;"	d	file:
SENDER_NUM	src/mthread.c	35;"	d	file:
SEND_BUF_SIZE	src/http.c	48;"	d	file:
SRC	Makefile	/^SRC := \\$/;"	m
TARGET	Makefile	/^TARGET := melantha$/;"	m
TRUE	inc/fifo.h	11;"	d
TYPE_ERROR	inc/http.h	/^	TYPE_ERROR = 0, $/;"	e	enum:http_response_t
UNSUPPORTED	inc/http.h	/^	UNSUPPORTED = 0, $/;"	e	enum:http_cmd_t
__CONFIG_H	inc/config.h	5;"	d
__FIFO_H	inc/fifo.h	5;"	d
__HTTP_H	inc/http.h	6;"	d
__MTHREAD_H	inc/mthread.h	5;"	d
_str_equal	src/config.c	32;"	d	file:
_str_equal	src/main.c	76;"	d	file:
_str_equal	src/main.c	92;"	d	file:
_task_enter_cs	src/mthread.c	25;"	d	file:
_task_leave_cs	src/mthread.c	27;"	d	file:
a 	website-example/css/standard.css	/^a {$/;"	s
a.egg 	website-example/css/standard.css	/^a.egg {$/;"	s
a.link_specified 	website-example/css/standard.css	/^a.link_specified {$/;"	s
config_current	inc/config.h	/^struct config_t config_current;$/;"	v	typeref:struct:config_t
config_load	src/config.c	/^int config_load(FILE *fp) {$/;"	f
config_t	inc/config.h	/^struct config_t {$/;"	s
empty	src/mthread.c	/^static sem_t empty, full;$/;"	v	file:
exit_handler	src/main.c	/^void exit_handler(int sig) {$/;"	f
fifo_create	src/fifo.c	/^struct fifo_t *fifo_create(void) {$/;"	f
fifo_dequeue	src/fifo.c	/^int fifo_dequeue(struct fifo_t *fifo) {$/;"	f
fifo_destruct	src/fifo.c	/^void fifo_destruct(struct fifo_t *fifo) {$/;"	f
fifo_enqueue	src/fifo.c	/^int fifo_enqueue(struct fifo_t *fifo, int socket_fd, $/;"	f
fifo_node	inc/fifo.h	/^struct fifo_node {$/;"	s
fifo_t	inc/fifo.h	/^struct fifo_t {$/;"	s
filetype	inc/fifo.h	/^	enum http_response_t filetype;$/;"	m	struct:fifo_node	typeref:enum:fifo_node::http_response_t
footer 	website-example/css/standard.css	/^footer {$/;"	s
full	src/mthread.c	/^static sem_t empty, full;$/;"	v	file:
get_head	src/fifo.c	/^struct fifo_node *get_head(struct fifo_t *fifo, int *socket_fd, $/;"	f
get_type	src/mthread.c	/^static enum http_response_t get_type(char const *filename) {$/;"	f	file:
h1 	website-example/css/standard.css	/^h1 {$/;"	s
head	inc/fifo.h	/^	struct fifo_node *head;$/;"	m	struct:fifo_t	typeref:struct:fifo_t::fifo_node
http_cmd_t	inc/http.h	/^enum http_cmd_t {$/;"	g
http_resolve	src/http.c	/^enum http_cmd_t http_resolve(int socket_fd, char *filename, int size) {$/;"	f
http_response_t	inc/http.h	/^enum http_response_t {$/;"	g
http_send	src/http.c	/^int http_send(int socket_fd, enum http_response_t rt, FILE *fp) {$/;"	f
http_send_404	src/http.c	/^void http_send_404(int socket_fd) {$/;"	f
http_send_head	src/http.c	/^static int http_send_head(int socket_fd, char *buf, $/;"	f	file:
img.logo 	website-example/css/logo.css	/^img.logo {$/;"	s
is_active	inc/fifo.h	/^	int is_active;			\/\/ whether this node is active $/;"	m	struct:fifo_node
key_port	src/config.c	/^static char const *key_port = "port";$/;"	v	file:
key_root	src/config.c	/^static char const *key_root = "root";$/;"	v	file:
lightSpeedIn 	website-example/css/myanimate.css	/^@-webkit-keyframes lightSpeedIn {$/;"	s
lightSpeedIn 	website-example/css/myanimate.css	/^@keyframes lightSpeedIn {$/;"	s
main	src/main.c	/^int main(int argc, char *argv[]) {$/;"	f
mthread_end	src/mthread.c	/^void mthread_end(void) {$/;"	f
mthread_enter	src/mthread.c	/^void mthread_enter(int socket_fd) {$/;"	f
mthread_init	src/mthread.c	/^void mthread_init(struct fifo_t *fifo) {$/;"	f
mthread_sigrun	src/mthread.c	/^static int mthread_sigrun = 1;$/;"	v	file:
next	inc/fifo.h	/^	struct fifo_node *next;$/;"	m	struct:fifo_node	typeref:struct:fifo_node::fifo_node
opacity: 1	website-example/css/myanimate.css	/^    opacity: 1;$/;"	s
p_file	inc/fifo.h	/^	FILE *p_file;			\/\/ the file to be sent $/;"	m	struct:fifo_node
port	inc/config.h	/^	int port;$/;"	m	struct:config_t
readline	src/config.c	/^static int readline(FILE *fp, char *buf, int n) {$/;"	f	file:
receiver_handler	src/mthread.c	/^static void receiver_handler(void *args) {$/;"	f	file:
root	inc/config.h	/^	char root[CONFIG_ROOT_SIZE];$/;"	m	struct:config_t
rotateIn 	website-example/css/myanimate.css	/^@-moz-keyframes rotateIn {$/;"	s
rotateIn 	website-example/css/myanimate.css	/^@-webkit-keyframes rotateIn {$/;"	s
rotateIn 	website-example/css/myanimate.css	/^@keyframes rotateIn {$/;"	s
sender_handler	src/mthread.c	/^static void sender_handler(void *args) {$/;"	f	file:
show_text 	website-example/css/myanimate.css	/^@keyframes show_text {$/;"	s
socket_fd	inc/fifo.h	/^	int socket_fd;$/;"	m	struct:fifo_node
socket_fd	src/main.c	/^static int socket_fd = 0;$/;"	v	file:
tail	inc/fifo.h	/^	struct fifo_node *tail;$/;"	m	struct:fifo_t	typeref:struct:fifo_t::fifo_node
task_lock	src/mthread.c	/^static pthread_mutex_t task_lock;$/;"	v	file:
tasklist	src/main.c	/^static struct fifo_t *tasklist = NULL;$/;"	v	typeref:struct:fifo_t	file:
tasklist	src/mthread.c	/^static struct fifo_t *tasklist;$/;"	v	typeref:struct:fifo_t	file:
to 	website-example/css/myanimate.css	/^	to {$/;"	s
to 	website-example/css/myanimate.css	/^  to {$/;"	s
transform: skewX	website-example/css/myanimate.css	/^    transform: skewX(-5deg);$/;"	s
transform: skewX	website-example/css/myanimate.css	/^    transform: skewX(20deg);$/;"	s
webkit-transform: skewX	website-example/css/myanimate.css	/^    -webkit-transform: skewX(-5deg);$/;"	s
webkit-transform: skewX	website-example/css/myanimate.css	/^    -webkit-transform: skewX(20deg);$/;"	s
